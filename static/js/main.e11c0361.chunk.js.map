{"version":3,"sources":["reducers/recipeReducer.js","actions/types.js","contexts/RecipeContext.js","components/nav/NavLinkItem.js","components/nav/NavBar.js","components/nav/Header.js","App.js","components/recipes/RecipeItem.js","components/recipes/RecipeList.js","components/Home.js","components/forms/RecipeForm.js","serviceWorker.js","components/recipes/RecipeDetail.js","index.js"],"names":["recipeReducer","state","action","type","id","uuid","title","recipe","ingredients","cookTime","servings","filter","RecipeContext","createContext","RecipeContextProvider","props","useReducer","recipes","dispatch","Provider","value","children","NavLinkItem","url","to","exact","activeClassName","className","NavBar","useState","links","map","link","key","Header","App","RecipeItem","useContext","role","aria-label","onClick","RecipeList","length","Home","RecipeForm","setTitle","setCookTime","setIngredients","setServings","onSubmit","e","preventDefault","trim","split","name","placeholder","onChange","target","required","rows","Boolean","window","location","hostname","match","RecipeDetail","params","find","toString","ingredient","index","ReactDOM","render","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e11c0361.chunk.js","sourcesContent":["import {ADD_RECIPE, REMOVE_RECIPE} from '../actions/types';\nimport uuid from 'uuid/v4';\n\nexport const recipeReducer = (state, action) =>{\n  switch(action.type) {\n    case ADD_RECIPE:\n      return [...state, {\n        id: uuid(),\n        title: action.recipe.title,\n        ingredients: action.recipe.ingredients,\n        cookTime: action.recipe.cookTime,\n        servings: action.recipe.servings\n      }]\n      case REMOVE_RECIPE:\n        return state.filter(recipe => recipe.id !== action.id)\n      default:\n        return state;\n  }\n}\n","export const ADD_RECIPE = 'ADD_RECIPE';\nexport const REMOVE_RECIPE = 'REMOVE_RECIPE';\n","import React, {createContext, useReducer} from 'react';\nimport {recipeReducer} from '../reducers/recipeReducer';\n\nexport const RecipeContext = createContext();\n\nconst RecipeContextProvider = props => {\n  const [recipes, dispatch] = useReducer(recipeReducer,[{id:1,title:\"Recipe Title\", ingredients: [\"1 palta\",\"2 tomatto\",\"salt\"],cookTime:15, servings: 2}]);\n  return (\n    <RecipeContext.Provider value={{recipes,dispatch}}>\n      {props.children}\n    </RecipeContext.Provider>\n  )\n}\n\nexport default RecipeContextProvider;\n","import React from 'react'\nimport {NavLink} from 'react-router-dom';\n\nconst NavLinkItem = props => {\n    const { title, url } = props;\n    return (\n      <NavLink to={url} exact activeClassName=\"NavBar-menu-current\" className=\"NavBar-menu-links\">\n        {title}\n      </NavLink>\n    );\n}\n\nexport default NavLinkItem;","import React, {useState} from 'react';\nimport NavLinkItem from './NavLinkItem';\n\nconst NavBar = () => {\n  const [links] = useState([\n     {id:1, url:\"/\", title:\"Home\"},\n     {id:2, url:\"/addrecipe\", title:\"Create\"}\n  ])\n  return (\n    <nav className=\"NavBar-menu\">\n      <ul>\n        {links.map(link => ( \n        <li key={link.id}>\n          <NavLinkItem  url={link.url} title={link.title} />\n          </li>\n          ))}\n      </ul>\n    </nav>\n  );\n}\n\nexport default NavBar;","import React from 'react';\nimport NavBar from './NavBar';\nimport './header.css';\nconst Header = () => {\n  return (\n    <header className=\"Header\">\n      <h1>Recipes</h1>\n      <NavBar/>\n    </header>\n  )\n}\n\nexport default Header;","import React from 'react';\nimport './App.css';\nimport Header from './components/nav/Header';\n\nconst App = props => {\n  return (\n    <div className=\"App\">\n     <Header/>\n     {props.children}\n    </div>\n  );\n}\n\nexport default App;\n","import React,{useContext} from 'react';\nimport {Link} from 'react-router-dom';\nimport {RecipeContext} from '../../contexts/RecipeContext';\nimport {REMOVE_RECIPE} from '../../actions/types';\n\nconst RecipeItem = ({recipe}) => {\n    const {dispatch} = useContext(RecipeContext)\n    const {id, title, cookTime, servings} = recipe;\n    const remove = () =>{\n       dispatch({\n           type: REMOVE_RECIPE,\n           id\n       });\n    }\n    return (\n        <div className=\"Recipe-card\">\n            <h2 className=\"RecipeForm-full\">{title}</h2>\n            <span><span role=\"img\" aria-label=\"clock\">🕒</span> {cookTime}</span>\n            <span><span role=\"img\" aria-label=\"people\">👥</span> {servings}</span>\n            <Link to={`/recipe/${id}`}><span role=\"img\" aria-label=\"eye\">👁️</span> View</Link>\n            <button onClick={remove}><span role=\"img\" aria-label=\"trash\">🗑️</span> Delete</button>\n        </div>\n    )\n}\n\nexport default RecipeItem;\n","import React,{useContext} from 'react'\nimport {RecipeContext} from '../../contexts/RecipeContext';\nimport RecipeItem from './RecipeItem';\nimport './recipe.css';\n\nconst RecipeList = () => {\n    const {recipes} = useContext(RecipeContext);\n    return (\n        <div className=\"Recipe\">\n                 {recipes.length ? \n                     recipes.map( recipe => (\n                         <RecipeItem  \n                           key={recipe.id}\n                           recipe={recipe}/>\n                     ))\n                  : <h3>Sorry not recipes yet :( ...</h3>}\n        </div>\n    )\n}\n\nexport default RecipeList;\n","import React from 'react'\nimport RecipeList from './recipes/RecipeList'\n\nconst Home = () => {\n    \n    return (\n        <div>\n          <RecipeList/>\n        </div>\n    )\n}\n\nexport default Home;","import React, {useState, useContext} from 'react'\nimport {RecipeContext} from '../../contexts/RecipeContext';\nimport {ADD_RECIPE} from '../../actions/types';\nimport './recipeForm.css';\n\nconst RecipeForm = () => {\n  const { dispatch } = useContext(RecipeContext);\n  const [title, setTitle] = useState('');\n  const [cookTime, setCookTime] = useState('');\n  const [ingredients, setIngredients] = useState('');\n  const [servings, setServings] = useState('');\n   \n  const handleSubmit = e =>{ \n     e.preventDefault();\n     dispatch(\n       {\n         type:ADD_RECIPE, \n         recipe: {\n           title,\n           ingredients: ingredients.trim().split('\\n'),\n           cookTime,\n           servings\n         }\n        })\n        setTitle('');\n        setIngredients('');\n        setServings('');\n        setCookTime('');\n  }\n\n  return (\n    <div className=\"RecipeForm\">\n      <h2>Create Recipe</h2>\n      <form onSubmit={handleSubmit}> \n        <input className=\"RecipeForm-full\" type=\"text\" name=\"title\" placeholder=\"Title\"  value={title} onChange={e => setTitle(e.target.value)} required />\n        <textarea className=\"RecipeForm-full\" rows=\"10\" placeholder=\"Ingredients\" value={ingredients} onChange={e=> setIngredients(e.target.value)} required/>\n        <input type=\"number\" name=\"cookTime\" placeholder=\"Cook Time\" value={cookTime}  onChange={e => setCookTime(e.target.value)} required />\n        <input type=\"number\" name=\"servings\" placeholder=\"Servings\" value={servings} onChange={e=> setServings(e.target.value)} required />\n        <input className=\"RecipeForm-full RecipeForm-btnSubmit\" type=\"submit\" value=\"add recipe\" />\n      </form>\n    </div>\n  )\n}\n\nexport default RecipeForm;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React,{useContext} from 'react'\nimport {RecipeContext} from '../../contexts/RecipeContext';\nconst RecipeDetail = (props) => {\n  const {recipes} = useContext(RecipeContext)\n  const id = props.match.params.id;\n const {title, ingredients, cookTime, servings} = recipes.find(recipe => recipe.id.toString() === id.toString());\n  return (\n    <div className=\"card\">\n    <div className=\"card-title\">\n      <h2>{title}</h2>\n    </div>\n    <div className=\"card-ingredient\">\n      {ingredients.map((ingredient,index) =>(\n  <p key={index}>{ingredient}</p>\n))} \n    </div>\n    <div className=\"card-misc\">\n      <div className=\"misc\">\n        <div className=\"value\"><span role=\"img\" aria-label=\"clock\">🕒</span></div>\n        <div className=\"type\">{cookTime}</div>\n      </div>\n      <div className=\"misc\">\n        <div className=\"value\"><span role=\"img\" aria-label=\"people\">👥</span></div>\n        <div className=\"type\">{servings}</div>\n      </div>\n    </div>\n  </div>\n  \n\n  )\n}\n\nexport default RecipeDetail;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Route, BrowserRouter, Switch } from \"react-router-dom\";\nimport RecipeContextProvider from './contexts/RecipeContext'\nimport './index.css';\nimport App from './App';\nimport Home from './components/Home';\nimport RecipeForm from './components/forms/RecipeForm';\n\nimport * as serviceWorker from './serviceWorker';\nimport RecipeDetail from './components/recipes/RecipeDetail';\n\nReactDOM.render(  \n<RecipeContextProvider>  \n<BrowserRouter>\n    <App>\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/addrecipe\" component={RecipeForm} />\n        <Route path=\"/recipe/:id\" component={RecipeDetail} />\n      </Switch>\n    </App>\n  </BrowserRouter>\n  </RecipeContextProvider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}